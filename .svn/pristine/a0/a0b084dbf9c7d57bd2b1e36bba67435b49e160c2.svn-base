package project.utilities;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import project.variables.ProjectVariables;

public class ExcelUtils {
	

public static int SetCellDataXlsm(String sTcName, String sTcStatus) throws Exception {

              int rowcount;
              int rowNum = 0;
              try {
                     
              int iTcNum = 1;
              int iTcName = 2;
              int iTcStatus = 3;
              int iTcTime = 4;                                                           
              String path = "P:\\IT\\PCAAutomation\\Mail\\Mail.xlsm";
                     
              DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
              Date date = new Date();
              String sDate = dateFormat.format(date).toString();
              
          		 File src = new File(path);
                 FileInputStream finput = new FileInputStream(src);
                 XSSFWorkbook workbook = new XSSFWorkbook(finput);
                 XSSFSheet sheet = workbook.getSheetAt(0);                   
                 rowcount = sheet.getPhysicalNumberOfRows();
                 
                 int iRowCount = rowcount;
                 rowNum = iRowCount+1;
                 String sTcNo = "TC_"+(iRowCount-9);

                 XSSFRow row = sheet.getRow(0);          
                 row = sheet.getRow(rowNum - 1);
                 if (row == null)
                       row = sheet.createRow(rowNum - 1);
                 
                 sheet.autoSizeColumn(iTcNum);
                 XSSFCell sTcNumCell = row.getCell(iTcNum);
                 if (sTcNumCell == null)
                       sTcNumCell = row.createCell(iTcNum);
                 sTcNumCell.setCellValue(sTcNo);
                 
                 sheet.autoSizeColumn(iTcName);
                 XSSFCell sTsNamecell = row.getCell(iTcName);
                 if (sTsNamecell == null)
                       sTsNamecell = row.createCell(iTcName);
                 sTsNamecell.setCellValue(sTcName);

                 sheet.autoSizeColumn(iTcStatus);
                 XSSFCell sTcStatusCell = row.getCell(iTcStatus);
                 if (sTcStatusCell == null)
                       sTcStatusCell = row.createCell(iTcStatus);
                 sTcStatusCell.setCellValue(sTcStatus);
          
                 sheet.autoSizeColumn(iTcTime);
                 XSSFCell sTcDateCell = row.getCell(iTcTime);
                 if (sTcDateCell == null)
                       sTcDateCell = row.createCell(iTcTime);
                 sTcDateCell.setCellValue(sDate);
                 
                 FileOutputStream fileOut = new FileOutputStream(path);
                 workbook.write(fileOut);
                     
                 fileOut.close();
                 
                     
              } catch (Exception e) {
                     e.printStackTrace();
              }
              
              return rowNum;
              
       }

public static boolean SetPath(int rowNum, int colName, String data, String sPath) {

    try {

           String path = sPath;
           FileInputStream fis = new FileInputStream(path);
           XSSFWorkbook workbook = new XSSFWorkbook(fis);
           if (rowNum <= 0)
                 return false;
           XSSFSheet sheet = workbook.getSheetAt(0);
           XSSFRow row = sheet.getRow(0);
           int colNum = colName;
           sheet.autoSizeColumn(colNum);
           row = sheet.getRow(rowNum - 1);
           if (row == null)
                 row = sheet.createRow(rowNum - 1);
           XSSFCell cell = row.getCell(colNum);
           if (cell == null)
                 cell = row.createCell(colNum);
           cell.setCellValue(data);
           FileOutputStream fileOut = new FileOutputStream(path);
           workbook.write(fileOut);
           fileOut.close();

    } catch (Exception e) {
           e.printStackTrace();
           return false;
    }
    return true;
}

public static int SetCellDataXlsm(String sFeaturename , String sTcName, String sTcStatus, String sPath, String arg1, String arg2) throws Exception {

    int rowcount;
    int rowNum = 0;
    try {
           
           int iTcNum = 0;
           int iFeatureName = 1;
           int iTcName = 2;
           int iTcStatus = 3;
           int iTcTime = 4;                                                           
           String path = sPath;
           
          DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    Date date = new Date();
    String sDate = dateFormat.format(date).toString();
    
    File src = new File(path);
           FileInputStream finput = new FileInputStream(src);
           XSSFWorkbook workbook = new XSSFWorkbook(finput);
           XSSFSheet sheet = workbook.getSheetAt(0);                   
           rowcount = sheet.getPhysicalNumberOfRows();
           
           int iRowCount = rowcount;
           rowNum = iRowCount+1;
           String sTcNo = "TC_"+(iRowCount-9);

           XSSFRow row = sheet.getRow(0);          
           row = sheet.getRow(rowNum - 1);
           if (row == null)
                 row = sheet.createRow(rowNum - 1);
           
           sheet.autoSizeColumn(iTcNum);
           XSSFCell sTcNumCell = row.getCell(iTcNum);
           if (sTcNumCell == null)
                 sTcNumCell = row.createCell(iTcNum);
           sTcNumCell.setCellValue(sTcNo);
           
           sheet.autoSizeColumn(iFeatureName);
           XSSFCell sFeatureCell = row.getCell(iFeatureName);
           if (sFeatureCell == null)
                 sFeatureCell = row.createCell(iFeatureName);
           sFeatureCell.setCellValue(sFeaturename);
           
           sheet.autoSizeColumn(iTcName);
           XSSFCell sTsNamecell = row.getCell(iTcName);
           if (sTsNamecell == null)
                 sTsNamecell = row.createCell(iTcName);
           sTsNamecell.setCellValue(sTcName);

           sheet.autoSizeColumn(iTcStatus);
           XSSFCell sTcStatusCell = row.getCell(iTcStatus);
           if (sTcStatusCell == null)
                 sTcStatusCell = row.createCell(iTcStatus);
           sTcStatusCell.setCellValue(sTcStatus);
    
           sheet.autoSizeColumn(iTcTime);
           XSSFCell sTcDateCell = row.getCell(iTcTime);
           if (sTcDateCell == null)
                 sTcDateCell = row.createCell(iTcTime);
           sTcDateCell.setCellValue(sDate);
           
           FileOutputStream fileOut = new FileOutputStream(path);
           workbook.write(fileOut);
           
           fileOut.close();
           
    } catch (Exception e) {
           e.printStackTrace();
    }
    
    return rowNum;
    
}

public static int GetSheetCount() throws Exception {
	int sheetcount;
	try {
		File src = new File(ProjectVariables.sTestDataFilePath);
		FileInputStream finput = new FileInputStream(src);
		XSSFWorkbook workbook = new XSSFWorkbook(finput);
		sheetcount = workbook.getNumberOfSheets();
	} catch (Exception e) {

		throw (e);

	}

	System.out.println("sheet Count:=" + sheetcount);
	return sheetcount;

}

/**
 * @param sheet_No
 * @return
 * @throws Exception
 */
public static int GetRowCount(int sheet_No) throws Exception {

	int rowcount;
	try {

		// Open the Excel file

		File src = new File(ProjectVariables.sTestDataFilePath);
		FileInputStream finput = new FileInputStream(src);
		XSSFWorkbook workbook = new XSSFWorkbook(finput);

		XSSFSheet ExcelWSheet = workbook.getSheetAt(sheet_No);

		rowcount = ExcelWSheet.getLastRowNum();

	} catch (Exception e) {

		throw (e);

	}

	System.out.println("Row Count:=" + rowcount);
	return rowcount;
}

public static int GetColumnCount(int sheet_No) throws Exception {

	int columncount;
	try {

		// Open the Excel file

		File src = new File(ProjectVariables.sTestDataFilePath);
		FileInputStream finput = new FileInputStream(src);
		XSSFWorkbook workbook = new XSSFWorkbook(finput);

		XSSFSheet ExcelWSheet = workbook.getSheetAt(sheet_No);
		XSSFRow row = ExcelWSheet.getRow(0);
		columncount = row.getLastCellNum();

	} catch (Exception e) {

		throw (e);

	}

	System.out.println("Column Count:=" + columncount);
	return columncount;
}

//////////////////////////////////////////////
public static String getCellData(int RowNum, int ColNum, int sheet_No,String Path) throws Exception {
	String cellText = null;

	try {

		File src = new File(Path);
		FileInputStream finput = new FileInputStream(src);
		HSSFWorkbook workbook = new HSSFWorkbook(finput);
		HSSFSheet sheet = workbook.getSheetAt(sheet_No);
		HSSFCell cell = sheet.getRow(RowNum).getCell(ColNum);

		if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
			cellText = cell.getStringCellValue();
		} else if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC || cell.getCellType() == Cell.CELL_TYPE_FORMULA) {
			cellText = String.valueOf(cell.getDateCellValue());
		} else if (cell.getCellType() == Cell.CELL_TYPE_BLANK)
			cellText = null;
		else
			cellText = "";
	}

	catch (Exception e) {
		// e.printStackTrace();
		System.out.println("row " + RowNum + " or column " + ColNum + " does not exist  in xlsx");
		cellText = null;
	}

	return cellText;
}



public static  String  getSheetName(int sheetNO){
	
	String sName=null;
		
	File getLatestFile = GenericUtils.getLatestFilefromDir(ProjectVariables.sTestDataFilePath);
	
	String fileName = getLatestFile.getName();
	
	String sNewFileName=ProjectVariables.sTestDataFilePath+fileName;
	
	//String sSheetName=ExcelUtils.GetSheetName(1,sNewFileName);
	
	System.out.println("Sheet Name"+sNewFileName);
	

    FileInputStream fileInputStream = null;
    try {
        fileInputStream = new FileInputStream(sNewFileName);

        HSSFWorkbook workbook = new HSSFWorkbook(fileInputStream);

        // for each sheet in the workbook
        //for (int i = 0; i < workbook.getNumberOfSheets(); i++) {

            //System.out.println("Sheet name: " + workbook.getSheetName(sheetNO));
            sName=workbook.getSheetName(sheetNO);
        //}

    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if (fileInputStream != null) {
            try {
                fileInputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
	return sName;
}


}
